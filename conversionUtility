import sys
import json;


class ConverterUtility:

    def __init__(self, filePath):
        self.filePath = filePath;
        jsonFile = open(self.filePath)
        self.jsonData = json.load(jsonFile)

    def sanitize(self, input):
        input = input.replace("&", "&amp;").replace("\"", "&quot;")
        input = input.replace("<", "&lt;").replace(">", "&gt;")
        return input;

    def getSuiteInfo(self):
        testSuiteDataDictionary = {};
        totalExecutionTime = 0;
        failedTestCasesCount = 0;

        totalTestCases = len(self.jsonData['results']);

        for testCaseCounter in range(0, totalTestCases):
            testCaseInfo = self.getTestCasesInfo(testCaseCounter);

            ## Total Execution Time
            executionTime = testCaseInfo['executionTime']
            totalExecutionTime += executionTime;

            ## ASSUMED : IF fail == "null" or fail == true or error != null THEN test case is failed.
            if testCaseInfo['testCaseFailureStatus'] or testCaseInfo['testCaseErrorMessage'] != None:
                failedTestCasesCount = failedTestCasesCount + 1;

        testSuiteDataDictionary["totalTestCases"] = totalTestCases;
        testSuiteDataDictionary["totalExecutionTime"] = totalExecutionTime;
        testSuiteDataDictionary['failedTestCasesCount'] = failedTestCasesCount;

        return testSuiteDataDictionary;


    # GET Test cases information and return Dictionary
    def getTestCasesInfo(self, testCaseIndex):
        testCaseDatDictionary = {};
        jsonResultData = self.jsonData['results'][testCaseIndex];
        nodeData = jsonResultData['node'];
        executionTime = jsonResultData['execution_time'];

        # ASSUMPTION - "fail" parameter with either "null" or "true" considered as FAILED
        if jsonResultData['fail'] is None or jsonResultData['fail']:
            testCaseFailureStatus = True;
        else:
            testCaseFailureStatus = False;

        # Getting Error Message - if Error Message is null, adding empty string in XML Error Tag
        if jsonResultData['error'] != None:
            testCaseErrorMessage = self.sanitize(jsonResultData['error']);
        else:
            testCaseErrorMessage = " ";

        ## Getting Type Of Failure - If No condition matching then TYPE = ERROR
        if jsonResultData['fail']:
            testCaseFailureType = 'FAILED';
        elif jsonResultData['warn']:
            testCaseFailureType = 'WARNING';
        elif jsonResultData['skip']:
            testCaseFailureType = 'SKIPPED';
        else:
            testCaseFailureType = 'ERROR';

        ## UPDATING THE DICTIONARY
        testCaseDatDictionary["executionTime"] = executionTime;
        testCaseDatDictionary['testCaseFailureStatus'] = testCaseFailureStatus;
        testCaseDatDictionary['testCaseErrorMessage'] = testCaseErrorMessage;
        testCaseDatDictionary['testCaseClassName'] = nodeData['package_name'];
        testCaseDatDictionary['testCaseName'] = nodeData['name'];
        testCaseDatDictionary['testCaseFailureStatus'] = testCaseFailureStatus;
        testCaseDatDictionary['testCaseFailureType'] = testCaseFailureType;

        return testCaseDatDictionary;


    def generateXMlFile(self):
        #Constant and Variable declaration
        XMLHEADER = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n"

        testSuitesTag = "";
        TESTSUITES_STARTTAG = "<testsuites"
        TESTSUITES_ENDTAG = "</testsuites>"

        testSuiteTag = "";
        TESTSUITE_STARTTAG = "\n" + "<testsuite"
        TESTSUITE_ENDTAG = "</testsuite>"

        testCaseTag = ""
        TESTCASE_STARTTAG = "\n" + "<testcase"
        TESTCASE_ENDTAG = "</testcase>"

        FAILURE_STARTTAG = "\n" + "<failure"
        FAILURE_ENDTAG = "</failure>"

        #Initialization of Test Suites Tag and Test Suite Tag
        testSuitesTag += TESTSUITES_STARTTAG;
        testSuitesTag += ">"

        TEST_SUITE_INFO = self.getSuiteInfo(); # Getting Suite Level Info
        totalTestCasesInSuite = TEST_SUITE_INFO['totalTestCases'];

        testSuiteTag += TESTSUITE_STARTTAG;
        testSuiteTag += " tests=" + "\"" + str(totalTestCasesInSuite) + "\"";
        testSuiteTag += " failures=" + "\"" + str(TEST_SUITE_INFO['failedTestCasesCount']) + "\"";
        testSuiteTag += " time=" + "\"" + str(TEST_SUITE_INFO['totalExecutionTime']) + "\"" + ">";

        #Loop Counter to iterate over all  Test Cases of a Suite
        for testcaseCounter in range(0, totalTestCasesInSuite):
            TEST_CASE_INFO = self.getTestCasesInfo(testcaseCounter); # Getting Test Case Level Info

            testCaseTag += TESTCASE_STARTTAG
            testCaseTag += " name=" + "\"" + TEST_CASE_INFO['testCaseName'] + "\"";
            testCaseTag += " class=" + "\"" + TEST_CASE_INFO['testCaseClassName'] + "\"";
            testCaseTag += " time=" + "\"" + str(TEST_CASE_INFO['executionTime']) + "\"" + ">";

            #Check for Failed Test Case
            if TEST_CASE_INFO['testCaseFailureStatus']:
                testCaseTag += FAILURE_STARTTAG;
                testCaseTag += " message=" + "\"" + TEST_CASE_INFO['testCaseErrorMessage'] + "\"";
                testCaseTag += " type=" + "\"" + TEST_CASE_INFO['testCaseFailureType'] + "\"";
                testCaseTag += ">" + FAILURE_ENDTAG + "\n";

            testCaseTag += TESTCASE_ENDTAG + "\n";

        testSuiteTag += testCaseTag;
        testSuiteTag += TESTSUITE_ENDTAG + "\n";

        testSuitesTag += testSuiteTag;
        testSuitesTag += TESTSUITES_ENDTAG + "\n";

        return XMLHEADER + testSuitesTag;


#Calling Utility
object = ConverterUtility(sys.argv[1]);
convertedData = object.generateXMlFile()
xmlFile = open(sys.argv[2], 'w');
xmlFile.write(convertedData)
xmlFile.close();

# Commands To Run -
# utility.py "<Inpput JSOn File Location>" "<Output File Location>"
